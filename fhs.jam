# Distributed under the Boost Software License, Version 1.0.
# See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt

# Provides mechanism for installing whole packages into a specific directory
# structure. This is opposed to the 'install' rule, that installs a number of
# targets to a single directory, and does not care about directory structure at
# all.

# Example usage:
#
#   fhs.install boost : <binaries>
#                     : <libraries>
#                     : <headers>
#                     : <properties>
#                     ;
#
# This will install binaries, libraries and headers to the 'proper' location,
# given by command line options --prefix, --exec-prefix, --bindir, --libdir and
# --includedir.
#
# The rule is just a convenient wrapper, avoiding the need to define several
# 'install' targets.
#
# The only install-related feature is <install-source-root>. It will apply to
# headers only and if present, paths of headers relatively to source root will
# be retained after installing. If it is not specified, then "." is assumed, so
# relative paths in headers are always preserved.

import "class" : new ;
import option ;
import project ;
import feature ;
import property ;
import stage ;
import targets ;
import modules ;
import common ;

feature.feature target-address-models : 32 64 : free incidental ;

rule build ( name package-name ? : binaries * : libraries * : requirements * ) {
  package-name ?= $(name) ;

  local target-address-models = [ property.select <target-address-models> : $(requirements) ] ;
  target-address-models = $(target-address-models:G=) ;
  target-address-models ?= "" ;

  local lib-shared-static = $(name)-lib-shared $(name)-lib-static ;
  alias $(name)-lib : $(lib-shared-static)$(target-address-models) ;
  if $(target-address-models) {
    for target-address-model in $(target-address-models) {
      alias $(name)-lib-shared$(target-address-model)
          : $(libraries)
          : $(requirements)
            <link>shared
            <address-model>$(target-address-model) ;
      alias $(name)-lib-static$(target-address-model)
          : $(libraries)
          : $(requirements)
            <link>static
            <address-model>$(target-address-model) ;
    }
  } else {
    alias $(name)-lib-shared
        : $(libraries)
        : $(requirements)
          <link>shared ;
    alias $(name)-lib-static
        : $(libraries)
        : $(requirements)
          <link>static ;
  }

  alias $(name)
      : $(binaries)
        $(name)-lib
      : $(requirements) ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-lib
             $(lib-shared-static)$(target-address-models)
             $(libraries) ;
  }
}

rule install ( name package-name ? : binaries * : libraries * : headers * : requirements * ) {
  package-name ?= $(name) ;

  if [ MATCH --prefix=(.*) : [ modules.peek : ARGV ] ] {
    # If --prefix is explicitly specified on the command line,
    # then we need wipe away any settings of libdir/includir that
    # is specified via options in config files.
    option.set bindir : ;
    option.set libdir : ;
    option.set includedir : ;
  }

  # If <install-source-root> is not specified, all headers are installed to prefix/include, no matter what their 
  # relative path is. Sometimes that is what is needed.
  local install-source-root = [ property.select <install-source-root> : $(requirements) ] ;
  install-source-root = $(install-source-root:G=) ;
  requirements = [ property.change $(requirements) : <install-source-root> ] ;

  local install-header-subdir = [ property.select <install-header-subdir> : $(requirements) ] ;
  install-header-subdir = /$(install-header-subdir:G=) ;
  install-header-subdir ?= "" ;
  requirements = [ property.change $(requirements) : <install-header-subdir> ] ;
  
  local target-address-models = [ property.select <target-address-models> : $(requirements) ] ;
  target-address-models = $(target-address-models:G=) ;
  target-address-models ?= "" ;

  # First, figure out all locations. Use the default if no prefix option given.
  local prefix = [ get-prefix $(name) : $(requirements) ] ;

  # Binaries.
  local bin-locate = [ option.get bindir : $(prefix)/bin ] ;

  # Object code libraries.
  local lib-locate = [ option.get libdir : $(prefix)/lib ] ;

  # Source header files.
  local include-locate = [ option.get includedir : $(prefix)/include ] ;

  stage.install $(name)-bin
              : $(binaries)
              : $(requirements)
                <location>$(bin-locate) ;
  
  local lib-shared-static = $(name)-lib-shared $(name)-lib-static ;
  alias $(name)-lib : $(lib-shared-static)$(target-address-models) ;
  if $(target-address-models) {
    for target-address-model in $(target-address-models) {
      stage.install $(name)-lib-shared$(target-address-model)
                  : $(libraries)
                  : $(requirements)
                    <location>$(lib-locate)$(target-address-model)
                    <install-type>SHARED_LIB
                    <link>shared
                    <address-model>$(target-address-model) ;
      stage.install $(name)-lib-static$(target-address-model)
                  : $(libraries)
                  : $(requirements)
                    <location>$(lib-locate)$(target-address-model)
                    <install-type>STATIC_LIB
                    <link>static
                    <address-model>$(target-address-model) ;
    }
  } else {
    stage.install $(name)-lib-shared
                : $(libraries)
                : $(requirements)
                  <location>$(lib-locate)
                  <install-type>SHARED_LIB
                  <link>shared ;
    stage.install $(name)-lib-static
                : $(libraries)
                : $(requirements)
                  <location>$(lib-locate)
                  <install-type>STATIC_LIB
                  <link>static ;
  }
  
  stage.install $(name)-headers
              : $(headers)
              : $(requirements)
                <location>$(include-locate)$(install-header-subdir)
                <install-source-root>$(install-source-root) ;
  
  alias $(name)
      : $(name)-bin
        $(name)-lib
        $(name)-headers ;

  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(name)
             $(name)-bin
             $(name)-lib
             $(name)-headers
             $(lib-shared-static)$(target-address-models) ;
  }
}

rule install-data ( name package-name ? : data * : requirements * ) {
  package-name ?= $(name) ;
  
  if [ MATCH --prefix=(.*) : [ modules.peek : ARGV ] ] {
    # If --prefix is explicitly specified on the command line, then we need wipe away any settings of datarootdir
    option.set datarootdir : ;
  }   
  
  local prefix = [ get-prefix $(package-name) : $(requirements) ] ;
  local datadir = [ option.get datarootdir : $(prefix)/share ] ;

  stage.install $(target-name) 
              : $(data)
              : $(requirements) <location>$(datadir)/$(package-name) ;
  
  local c = [ project.current ] ;
  local project-module = [ $(c).project-module ] ;
  module $(project-module) {
    explicit $(target-name) ;
  }
}

local rule get-prefix ( package-name : requirements * ) {
  local prefix = [ option.get prefix : [ property.select <install-default-prefix> : $(requirements) ] ] ;

  # Remove ./ in prefix by
  prefix = $(prefix:G=) ;
  requirements = [ property.change $(requirements) : <install-default-prefix> ] ;

  # Or some likely defaults if neither is given.
  if ! $(prefix) {
    if [ modules.peek : NT ] { prefix = C:\\$(package-name) ; }
    else if [ modules.peek : UNIX ] { prefix = /usr/local ; }        
  }

  return $(prefix) ;
}